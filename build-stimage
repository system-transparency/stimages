#! /bin/bash
set -eu

# CONFIG="$1"; shift
# FLAVOUR="$1"; shift
OUT="$1"; shift			# Path to where to store produced ST image.

NETBOOT_URL="$1"; shift;	# URL from where to download the ST image.
KERNEL="$1"; shift		# Path to file with kernel.
KCMDLINE="$1"; shift		# Path to file with kernel command line.
INITRAMFS="$1"; shift		# Path to file with initramfs.
# Subsequent arguments are paths to signing certs and keys.

ensure_stmgr() {
    local newpath
    newpath="$("$(dirname $0)"/build-stmgr v0.5.2)"
    [ $? -eq 0 ] && PATH="$newpath"
}

create_image() {
    stmgr ospkg create \
	  --label="Example ST image" \
	  --out="$OUT" \
	  --kernel="$KERNEL" \
	  --cmdline="$(cat "$KCMDLINE")" \
	  --initramfs="$INITRAMFS" \
	  --url="$NETBOOT_URL"
}

sign_image() {
    local certs=()
    local keys=()

    local looking_at_cert=1
    while [ $# -gt 0 ]; do
	if [[ $looking_at_cert = 1 ]]; then
	    certs+=("$1")
	    looking_at_cert=0
	else
	    keys+=("$1")
	    looking_at_cert=1
	fi
	shift
    done
    [[ ${#certs[@]} -eq ${#keys[@]} ]] || { "$0: signing certs and keys mismatch"; exit 1; }

    for k in "${!certs[@]}"; do
	local key=${keys[$k]}
	local cert=${certs[$k]}

	stmgr ospkg sign --cert "$cert" --key "$key" --ospkg "$OUT"
    done
}

chmod_image() {
    chmod 644 "$OUT" "$(dirname "$OUT")"/"$(basename "$OUT" .zip)".json
}

ensure_stmgr
create_image
sign_image $@
chmod_image
