#! /bin/bash
set -eu

CONFIG="$1"; shift
OUT="$1"; shift			# NOTE: Relative to $(dirname $0)
[ $# -gt 0 ] && { FLAVOUR="$1"; shift; }
[ $# -gt 0 ] && { KERNEL_DEB="$1"; shift; } # Optional: Path to Debian package (.deb) with kernel to use

FLAVOUR=${FLAVOUR-vanilla}
KERNEL_DEB=${KERNEL_DEB-}

DEBIAN_RELEASE=bookworm
PKGLIST_BASE="$CONFIG"/pkgs/000base.pkglist

check_build_deps() {
    for cmd in $@; do
	[ -z $(command -v "$cmd") ] && return 1
    done
    return 0
}

CONTAIN=			# Default: Don't run in container
check_build_deps mmdebstrap || CONTAIN=./contain

OUTDIR=$(dirname "$OUT")
[ -d "$OUTDIR" ] || mkdir -p "$OUTDIR"
rootfs="$OUTDIR"/rootfs

### Collect root password
if [[ -r ${CONFIG}/pw.root ]]; then
    PW_ROOT="$(cat "${CONFIG}/pw.root")"
else
    read -rs -p "Root password to set in image: " PW_ROOT
    echo
fi

build_rootfs() {
    mkdir -p "$rootfs"

    ### Build APT sources.list
    sources_list="$OUTDIR"/sources.list
    case "$DEBIAN_RELEASE" in	# https://wiki.debian.org/SourcesList
	bookworm)
	    # NOTE: non-free-firmware for intel-microcode on physical machines
	    DEBIAN_COMPONENTS="main non-free-firmware"
	    cat >$sources_list <<EOF
deb https://ftp.acc.umu.se/debian/          $DEBIAN_RELEASE          $DEBIAN_COMPONENTS
deb https://ftp.acc.umu.se/debian/          $DEBIAN_RELEASE-updates  $DEBIAN_COMPONENTS
deb https://deb.debian.org/debian-security/ $DEBIAN_RELEASE-security $DEBIAN_COMPONENTS
EOF
	    ;;
    esac

    ### Run mmdebstrap
    # TODO: use $APT_CACHER_NG for local proxy, add
    #     --aptopt='Acquire::http { Proxy "http://localhost:3142"; }' \
    verbosity=			# empty, --silent or --verbose
    mmdebstrap_flags="
	"$verbosity"
	--architectures=amd64
	--variant=minbase
	--include=$(grep -E -v '^[[:space:]]*#|^[[:space:]]*$' ${PKGLIST_BASE} | tr '\n' ',')"
    if [ -f ${CONFIG}/pkgs/${FLAVOUR}.pkglist ]; then
	mmdebstrap_flags+=" --include=$(grep -E -v '^[[:space:]]*#|^[[:space:]]*$' ${CONFIG}/pkgs/${FLAVOUR}.pkglist | tr '\n' ',')"
    fi

    echo "$0: running mmdebstrap, will take a minute or two"
    echo "$0: if mmdebstrap prints a warning about unshare failing (Operation not permitted), that can be ignored"
    $CONTAIN mmdebstrap --mode sudo $mmdebstrap_flags $DEBIAN_RELEASE $rootfs $sources_list
    rm "$sources_list"
}

copy_kernel() {
    ### Copy kernel to or from rootfs
    if [ -f "$KERNEL_DEB" ]; then
	echo "$0: copy kernel to rootfs NYI"
	exit 1
    else
	cp -v "$rootfs/boot/vmlinuz-"* "$OUTDIR"/
	src="$(cd "${OUTDIR}" && ls vmlinuz-* | tail -1)"
	tgt="$(basename "$OUT" .cpio.gz)".vmlinuz
	ln -sfv "${src}" "${OUTDIR}/${tgt}"
    fi
}
	
configure_rootfs() {
    ### Configure rootfs (TODO: use mmdebstrap hooks instead)
    if [ -d "${CONFIG}"/overlays/"${FLAVOUR}" ]; then
	sudo cp -r --no-dereference --preserve=links,mode,timestamps "${CONFIG}"/overlays/"${FLAVOUR}"/* "$rootfs"/
    fi
    if [ -x "$CONFIG"/scripts/setup.sh ]; then
	sudo "$CONFIG"/scripts/setup.sh "$rootfs" "$CONFIG"
    fi
    if [ -x "$CONFIG"/scripts/setup-in-chroot.sh ]; then
	cp "$CONFIG"/scripts/setup-in-chroot.sh "$rootfs"/tmp/
	sudo chroot $rootfs /tmp/setup-in-chroot.sh
	rm "$rootfs"/tmp/setup-in-chroot.sh
    fi
    sudo chroot "$rootfs" /bin/bash -c "echo \"root:${PW_ROOT}\" | chpasswd"
    if [ -x "$CONFIG"/scripts/cleanup.sh ]; then
	sudo "$CONFIG"/scripts/cleanup.sh "$rootfs"
    fi
}

create_cpio_archive() {
    ### Create cpio archive
    # TODO: prepend cpio archive with /kernel/x86/microcode/GenuineIntel.bin containing /lib/firmware/intel-ucode/* to $OUT, for targeting real hw
    # NOTE: If mmdebstrap was run in a container, cpio needs to be run in a container because file ownership.
    cat >"$OUTDIR"/mkcpio.sh <<EOF
set -eu
(cd $rootfs && find . | LC_ALL=C sort | cpio --quiet -o -H newc | pigz) > "$OUT"
EOF
    $CONTAIN sudo /bin/bash "$OUTDIR"/mkcpio.sh
    rm "$OUTDIR"/mkcpio.sh
}

####################
[ -d "$rootfs" ] || build_rootfs
copy_kernel
configure_rootfs
create_cpio_archive
