#! /bin/bash
set -eu

[ $# -gt 1 ] || { echo "Usage: $0 OSPKG-POINTER ROOT-CERT [FORMAT [OUTPUT]]"; exit 1; }

STIMAGE_JSON_URL="$1"; shift
ROOTCERT="$1"; shift
[ $# -gt 0 ] && { FORMAT="$1"; shift; }
[ $# -gt 0 ] && { OUT="$1"; shift; }

STBOOT_VERSION=${STBOOT_VERSION-v0.6.4}
STMGR_VERSION=${STMGR_VERSION-v0.6.6}

FORMAT=${FORMAT-iso}
OUT=${OUT-stboot.$FORMAT}
OUTDIR="$(dirname "$OUT")"
IDIR="$OUTDIR/stboot.tmp"	# Intermediate output directory
mkdir -p "$IDIR"

debug_print_input() {
    echo STIMAGE_JSON_URL="$STIMAGE_JSON_URL"
    echo ROOTCERT="$ROOTCERT"
    echo FORMAT="$FORMAT"
    echo OUT="$OUT"
    echo STBOOT_VERSION="$STBOOT_VERSION"
    echo STMGR_VERSION="$STMGR_VERSION"
}

[ -r "$ROOTCERT" ] || { echo "$0: $ROOTCERT: file not found or not readable"; exit 1; }
[ -d "$OUTDIR" ] || { echo "$0: $OUTDIR: directory not found"; exit 1; }

install_dependencies() {
    go install system-transparency.org/stmgr@"${STMGR_VERSION}"
    CGO_ENABLED=0 go install system-transparency.org/stboot@"${STBOOT_VERSION}"
}    

create_default_stboot_config() {
    HC="{
      \"network_mode\": \"dhcp\",
      \"host_ip\": null,
      \"gateway\": null,
      \"dns\": null,
      \"network_interfaces\": null,
      \"ospkg_pointer\": \"${STIMAGE_JSON_URL}\",
      \"bonding_mode\": null,
      \"bond_name\": \"\"
    }"
    stmgr hostconfig check "$HC" > "${IDIR}"/host_config.json

    stmgr trustpolicy check '
    {
      "ospkg_signature_threshold": 1,
      "ospkg_fetch_method": "network"
    }
    ' > "${IDIR}"/trust_policy.json
}    

uroot_files="
	${ROOTCERT}:etc/trust_policy/ospkg_signing_root.pem
	contrib/stboot/isrgrootx1.pem:etc/trust_policy/tls_roots.pem
	${IDIR}/host_config.json:etc/host_configuration.json
	${IDIR}/trust_policy.json:etc/trust_policy/trust_policy.json"

build_archive() {
    local out="$1"; shift
    local idir; idir="$(dirname "$out")"

    rm -rf "$idir/tmp-initramfs"
    mkdir -p "$idir/tmp-initramfs"
    for f in "$@"; do
	(IFS=: read -r from to
         mkdir -p "$idir"/tmp-initramfs/"$(dirname "$to")"
         ln -sr "$from" "$idir"/tmp-initramfs/"$to"
	) <<< "$f"
    done
    ln -sr "$(command -v stboot)" "$idir/tmp-initramfs/init"
    (set -eu
     cd "$idir/tmp-initramfs"
     find . | cpio -o -H newc -R 0:0 --dereference
    ) > "${out}".tmp
    pigz -f "$out".tmp
    mv "${out}".tmp.gz "$out"
}

create_img() {
    # stmgr refuses to overwrite target file
    [[ -f "$OUT" ]] && mv "$OUT" "$OUT".BAK

    # NOTE: Simply using an arbitrary stimage kernel will most likely fail with "no modules found matching '/lib/modules/*.ko'"
    stmgr uki create \
	  -format "$FORMAT" \
	  -out "$OUT" \
	  -kernel "contrib/stboot/linuxboot.vmlinuz" \
	  -cmdline "console=ttyS0,115200 -- --loglevel=debug" \
	  -initramfs "${IDIR}"/stboot.cpio.gz
}

install_dependencies
create_default_stboot_config
build_archive "${IDIR}"/stboot.cpio.gz $uroot_files
create_img
