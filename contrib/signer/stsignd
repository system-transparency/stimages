#! /bin/bash
#
# Program signing ST OS images downloaded from GitLab CI/CD and uploading
# them to an image server.
#
# Configuration is read from ~/.config/stsignd/config and ~/.config/stsignd/jobs/*.{conf,keys}
# State is written to files in ~/.local/state/stsignd/.
#
# NOTE: Uploads are not atomic (.zip before .json) so there's a window where stboot will fail validation
#
set -eu

STATE_DIR=~/.local/state/stsignd

# Download URL if we think the file is newer than what we've seen before.
# Store downloaded file in FILE_OUT.
# Return 0 if the file was downloaded.
# Return 1 if the file was not downloaded.
download() {
    local url="$1"; shift
    local file_out="$1"; shift
    local id="$1"; shift

    # Unfortunately GitLab/nginx doesn't update the last-modified
    # header as expected so instead of curl --time-cond we compare
    # both last-modified and content-length from a HEAD call. If any
    # of them has changed, we download the file.

    local -i response_code length new_length
    local lastmod new_lastmod
    local statefile="${STATE_DIR}/${id}"
    [[ -f "$statefile" ]] || touch "$statefile"
    read -r length lastmod <<< "$(<"$statefile")"

    read -r response_code new_length new_lastmod <<< \
	 "$(curl --silent --location \
	 	 --write-out '%{response_code} %header{content-length} %header{last-modified}' \
	 	 --head \
		 --output /dev/null \
		 "$url")"
    if [[ $response_code -eq 200 &&
	      $new_length -ne $length ||
		  "$new_lastmod" != "$lastmod" ]]; then
	read -r response_code new_length new_lastmod <<< \
	     "$(curl --silent --location \
	 	 --write-out '%{response_code} %header{content-length} %header{last-modified}' \
		 --output "$file_out" \
		 "$url")"
	if [[ $response_code -eq 200 ]]; then
	    echo "$new_length $new_lastmod" > "$statefile"
	    return 0
	fi
    fi

    return 1
}

sign() {
    local path="$1"; shift
    local a=("$@")
    local cert key k

    for k in "${!a[@]}"; do
	if [[ $((k % 2)) -eq 0 ]]; then
	    eval cert="${a[$k]}"
	elif [ -n "${a[$k]}" ]; then
	    eval key="${a[$k]}"
	    stmgr ospkg sign --cert "$cert" --key "$key" --ospkg "$path"
	    unset cert key
	fi
    done
    if [ -n "${cert-}" ]; then
	echo "skipping cert without key: $cert"
    fi
}

upload() {
    local path="$1"; shift
    local name; name="$(basename "$path")"

    echo "$name" | cat - "$path" | ssh "$host"
}

sign_and_upload() {
    local path="$1"; shift
    local host="$1"; shift
    local keys=("$@")

    local dir; dir="$(dirname "$path")"
    local fn; fn="$(basename "$path")"
    local cwd; cwd="$(pwd)"
    cd "$dir"
    unzip -qq "$fn"
    rm "$fn"
    mv stimages/build/*.{json,zip} .
    rm -rf stimages

    local zip
    for zip in *.zip; do
	fn="$(basename "$zip" .zip)"
	[ -f "$fn".json ] || continue # Skip if no .json
	sign "$fn".zip "${keys[@]}"
	upload "$fn".zip
	upload "$fn".json
    done

    cd "$cwd"
}

main() {
    trap 'rm -rf "$dir"' EXIT
    mkdir -p ~/.local/state/stsignd

    while true; do
	if [[ -f ~/.config/stsignd/config && -d ~/.config/stsignd/jobs ]]; then
	    for jobconf in ~/.config/stsignd/jobs/*.conf; do
		[ -n "${dir-}" ] && rm -rf "$dir"
		job="$(basename "$jobconf" .conf)"

		# shellcheck disable=SC2034
		read -r ulspec proj < "$jobconf" # $proj is used below when sourcing the config

		keys=()
		while read -r cert key; do
		    keys+=("$cert" "$key")
		done < ~/.config/stsignd/jobs/"$job".keys

		dir="$(mktemp -d /tmp/stsignd-XXXXXXXXXX)"

		# shellcheck source=/dev/null
		source ~/.config/stsignd/config # Substituting $proj and $job
		download "${download_url_template-localhost}" "${dir}"/dl.zip "${job}" || continue

		sign_and_upload "$dir"/dl.zip "$ulspec" "${keys[@]}"
	    done
	fi
	sleep "${sleep_between_runs-5m}"
    done
}

main
